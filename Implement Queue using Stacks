
class MyQueue {
    private Stack<Integer> input;
    private Stack<Integer> output;

    public MyQueue() {
        input = new Stack<>();
        output = new Stack<>();
    }

    // Push element x to the back of queue.
    public void push(int x) {
        input.push(x);
    }

    // Removes the element from in front of queue and returns that element.
    public int pop() {
        shiftStacks();
        return output.pop();
    }

    // Get the front element.
    public int peek() {
        shiftStacks();
        return output.peek();
    }

    // Returns whether the queue is empty.
    public boolean empty() {
        return input.isEmpty() && output.isEmpty();
    }

    // Returns true if queue contains the given element
    public boolean contains(int x) {
        return input.contains(x) || output.contains(x);
    }

    // Returns true if exactly one element is in the queue
    public boolean isSingleElement() {
        return (input.size() + output.size()) == 1;
    }

    // Move elements from input to output if output is empty
    private void shiftStacks() {
        if (output.isEmpty()) {
            while (!input.isEmpty()) {
                output.push(input.pop());
            }
        }
    }
}
